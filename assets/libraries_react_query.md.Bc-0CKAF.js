import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.Bv6InF5B.js";const u=JSON.parse('{"title":"@guesung/query","description":"","frontmatter":{},"headers":[],"relativePath":"libraries/react/query.md","filePath":"libraries/react/query.md"}'),n={name:"libraries/react/query.md"};function l(h,s,k,p,r,d){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="guesung-query" tabindex="-1">@guesung/query <a class="header-anchor" href="#guesung-query" aria-label="Permalink to &quot;@guesung/query&quot;">​</a></h1><h2 id="개요" tabindex="-1">개요 <a class="header-anchor" href="#개요" aria-label="Permalink to &quot;개요&quot;">​</a></h2><p><code>Query</code> 모듈은 React 환경에서 서버 데이터의 비동기 fetch, 캐싱, 상태 관리, mutation(쓰기/갱신) 등을 간편하게 처리할 수 있도록 도와주는 커스텀 훅 집합입니다.<br> React Query의 핵심 패턴을 간단하게 구현하여, 데이터 요청/갱신/에러/로딩 상태를 일관되게 관리할 수 있습니다.</p><h2 id="주요-특징" tabindex="-1">주요 특징 <a class="header-anchor" href="#주요-특징" aria-label="Permalink to &quot;주요 특징&quot;">​</a></h2><ol><li><p><strong>데이터 Fetch 및 캐싱</strong></p><ul><li><code>useQuery</code> 훅을 통해 서버 데이터를 가져오고, 동일 쿼리 키로 캐싱합니다.</li><li>자동 재요청(5분마다) 및 수동 refetch 지원.</li></ul></li><li><p><strong>상태 관리</strong></p><ul><li>각 쿼리별로 <code>idle</code>, <code>pending</code>, <code>success</code>, <code>error</code> 상태를 관리합니다.</li><li><code>useQueryStatus</code>, <code>useQueryData</code>로 상태/데이터 구독 가능.</li></ul></li><li><p><strong>Mutation(쓰기/갱신) 지원</strong></p><ul><li><code>useMutation</code> 훅을 통해 POST/PUT/PATCH/DELETE 등 서버 데이터 변경 작업을 수행할 수 있습니다.</li><li>요청 전후/성공/실패 콜백 지원.</li></ul></li><li><p><strong>Promise 중복 방지</strong></p><ul><li>동일 쿼리 키로 중복 fetch 요청 시, 기존 Promise를 재사용하여 네트워크 낭비를 막습니다.</li></ul></li></ol><h2 id="사용법" tabindex="-1">사용법 <a class="header-anchor" href="#사용법" aria-label="Permalink to &quot;사용법&quot;">​</a></h2><h3 id="_1-usequery" tabindex="-1">1. useQuery <a class="header-anchor" href="#_1-usequery" aria-label="Permalink to &quot;1. useQuery&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useQuery } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@/modules/Query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">refetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  queryKey: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  queryFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetchUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Promise 반환 함수</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  initialData: { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Guest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (선택) 초기 데이터</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><ul><li><code>data</code>: 쿼리 결과 데이터</li><li><code>status</code>: &quot;idle&quot; | &quot;pending&quot; | &quot;success&quot; | &quot;error&quot;</li><li><code>refetch()</code>: 강제 재요청</li></ul><h3 id="_2-usemutation" tabindex="-1">2. useMutation <a class="header-anchor" href="#_2-usemutation" aria-label="Permalink to &quot;2. useMutation&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useMutation } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@/modules/Query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mutate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useMutation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  mutationFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">variables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(variables), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Promise 반환 함수</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onSuccess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;성공!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;에러 발생&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mutate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;new name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div><ul><li><code>mutate(variables, options)</code>: 서버에 데이터 변경 요청</li><li><code>status</code>: &quot;idle&quot; | &quot;pending&quot; | &quot;success&quot; | &quot;error&quot;</li></ul><h3 id="_3-상태-데이터-구독" tabindex="-1">3. 상태/데이터 구독 <a class="header-anchor" href="#_3-상태-데이터-구독" aria-label="Permalink to &quot;3. 상태/데이터 구독&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useQueryData, useQueryStatus } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@/modules/Query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useQueryData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useQueryStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="_4-쿼리-데이터-상태-직접-제어" tabindex="-1">4. 쿼리 데이터/상태 직접 제어 <a class="header-anchor" href="#_4-쿼리-데이터-상태-직접-제어" aria-label="Permalink to &quot;4. 쿼리 데이터/상태 직접 제어&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { setQueryData, setQueryStatus } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@/modules/Query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setQueryData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;직접 변경&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setQueryStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;success&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="타입" tabindex="-1">타입 <a class="header-anchor" href="#타입" aria-label="Permalink to &quot;타입&quot;">​</a></h2><ul><li><code>Status</code>: &quot;idle&quot; | &quot;pending&quot; | &quot;success&quot; | &quot;error&quot;</li><li><code>QueryKey</code>: string</li></ul><h2 id="주의사항" tabindex="-1">주의사항 <a class="header-anchor" href="#주의사항" aria-label="Permalink to &quot;주의사항&quot;">​</a></h2><ul><li>쿼리 키(<code>queryKey</code>)는 string으로 유일하게 지정해야 합니다.</li><li>GET 요청은 <code>useQuery</code>, 데이터 변경은 <code>useMutation</code>을 사용하세요.</li><li>fetch 함수는 반드시 Promise를 반환해야 합니다.</li><li>캐싱/상태 관리는 메모리 기반이므로, 새로고침 시 초기화됩니다.</li></ul>`,20)]))}const E=i(n,[["render",l]]);export{u as __pageData,E as default};
